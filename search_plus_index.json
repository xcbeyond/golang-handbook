{"./":{"url":"./","title":"序言","keywords":"","body":"序言 “Go will be the server language of the future.” — Tobias Lütke, Shopify 在过去几年，崛起了一门新的语言：Go 或者 GoLang。没有什么比一门新的编程语言更令开发者兴奋了，不是么? 图 1.1.1：golang 目前一些开源社区，纷纷采用 Go 语言开发了许多平台、框架等，如：Docker、Kubernetes等，甚至逐步从其它语言（如：C、Java 等）转换到了 Go，相信这一点你已经体会到了。当您在看一些开源代码时，全是 Go 语言编写的，你该咋办呢？ 此外，伴随着近两年来云原生技术的发展迅猛，Go 语言作为新生代的编译型编程语言，凭借语法简单、高并发性能良好和编译速度快等特点，成为了云原生技术落地实践的绝妙利器。云原生的到来，这也将迫使您不得不多学习一门新语言了。 因此，从今天开始从零开始学 Go 语言，一方面是督促自己不断前行且学习新的知识，另一方面是分享给读者，希望与大家一起进步。该电子书将从零基础开始，以通俗易懂的方式一起学习、分享 Go 语言的学习历程，不断归档总结，且看且珍惜吧，加油！ 适合人群： 编程爱好者 Go语言初学者 学习目标： 帮助 Go 语言小白快速学习 Go 语言基础知识，从不了解到了解，到会写 Go 语言程序，到入门，直到精通，作为Go语言系列全教程。 废话不多说，奥力给！ Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-07-21 18:11:51 "},"introduction/golang-introduce.html":{"url":"introduction/golang-introduce.html","title":"Go语言介绍","keywords":"","body":"Go语言介绍 1、Go语言介绍 Go is an open source programming language that makes it easy to build simple, reliable, and efficient software. “Go 是一种开源的程序设计语言，它意在使得人们能够方便地构建简单、可靠、高效的软件。”（来自Go 官网golang.org的定义） Go 语言，又称为 Golang，在 2007 年 9 月形成构思，并于 2009 年 11 月发布，其发明人是 Google 的 Robert Griesemer, Rob Pike 和 Ken Thompson。该语言其及配套工具集使得编译和执行既富有表达力又高效，而且使得程序员能够轻松写出可靠、健壮的程序。 Go 的吉祥物是金花鼠（gordon），并将其作为 logo，如下图所示： Go 是从 2007 年末由 Robert Griesemer, Rob Pike, Ken Thompson 主持开发，后来还加入了 Ian Lance Taylor, Russ Cox 等人，并最终于 2009 年 11 月开源，在 2012 年早些时候发布了 Go 1 稳定版本。现在 Go 的开发已经是完全开放的，并且拥有一个活跃的社区。 1.1 Go 的起源 编程语言的演化跟生物物种的演化类似，成功的语言会繁衍后代，这些后代语言会从它们的祖先那里汲取各种优点。有时候，语言间的“混血”会产生异常强大的力量；在一些罕见情况下，某个重大的语言特性也可能凭空出现而无先例。通过观察语言间的影响，我们可以学到不少知识，比如语言为什么会变成这个样子，以及它适合用于哪些环境等等。 下图展示了有哪些早期的编程语言对 Go 语言的设计产生了重要影响。 图 2.1.1：Go语言的演进过程 Go 有时会称为“类 C 语言”，或者是“21 世纪的 C 语言”。从 C 中，Go 继承了相似的表达式语法、控制流结构、基本数据类型、按值调用的形参传递和指针，但比这些更重要的是，继承了C所强调的要点：程序要编译成高效的机器码，并自然地与所处的操作系统提供的抽象机制相配合。 但是在 Go 语言的家族树中还有其它的祖先。其中一个有影响力的分支来自Niklaus Wirth所设计的Pascal语言。然后Modula-2语言激发了包的概念。然后Oberon语言摒弃了模块接口文件和模块实现文件之间的区别。第二代的Oberon-2语言直接影响了包的导入和声明的语法，还有 Oberon 语言的面向对象特性所提供的方法的声明语法等。 Go 语言的另一支祖先，带来了 Go 语言区别其他语言的重要特性，灵感来自于贝尔实验室的Tony Hoare于1978年发表的鲜为外界所知的关于并发研究的基础文献 顺序通信进程 （ communicating sequential processes ，缩写为CSP。在CSP中，程序是一组中间没有共享状态的平行运行的处理过程，它们之间使用管道进行通信和控制同步。不过Tony Hoare的CSP只是一个用于描述并发性基本概念的描述语言，并不是一个可以编写可执行程序的通用编程语言。 接下来，Rob Pike 和其他人开始不断尝试将CSP引入实际的编程语言中。他们第一次尝试引入CSP特性的编程语言叫Squeak（老鼠间交流的语言），是一个提供鼠标和键盘事件处理的编程语言，它的管道是静态创建的。然后是改进版的Newsqueak语言，提供了类似 C 语言语句和表达式的语法和类似Pascal语言的推导语法。Newsqueak 是一个带垃圾回收的纯函数式语言，它再次针对键盘、鼠标和窗口事件管理。但是在 Newsqueak 语言中管道是动态创建的，属于第一类值, 可以保存到变量中。 在 Plan9 操作系统中，这些优秀的想法被吸收到了一个叫Alef的编程语言中。Alef试图将Newsqueak语言改造为系统编程语言，但是因为缺少垃圾回收机制而导致并发编程很痛苦。（译注：在 Alef 之后还有一个叫Limbo的编程语言，Go 语言从其中借鉴了很多特性。 具体请参考 Pike 的讲稿：http://talks.golang.org/2012/concurrency.slide#9 ） Go 语言的其他的一些特性零散地来自于其他一些编程语言；比如 iota 语法是从APL)语言借鉴，词法作用域与嵌套函数来自于Scheme)语言（和其他很多语言）。当然，我们也可以从 Go 中发现很多创新的设计。比如 Go 语言的切片为动态数组提供了有效的随机存取的性能，这可能会让人联想到链表的底层的共享机制。还有 Go 语言新发明的 defer 语句。 1.2 Go 的特点 简洁、快速、安全 并行、有趣、开源 内存管理、数组安全、编译迅速 1.3 Go 的用途 其它语言能够实现的系统，Go 语言都能实现。 目前，Go 主要应用在下面这些系统： 服务器编程，以前你如果使用 C 或者 C++ 做的那些事情，用 Go 来做很合适，例如处理日志、数据打包、虚拟机处理、文件系统等。 分布式系统、数据库代理器等，比如 Etcd。 网络编程，这一块目前应用最广，包括 Web 应用、API 应用、下载应用，而且 Go 内置的 net/http 包基本上把我们平常用到的网络功能都实现了。 数据库，前一段时间 Google 开发的 Groupcache，Couchbase 的部分组件，Tidb，Cockroachdb，Influxdb 等。 云平台，目前国外很多云平台在采用Go开发，CloudFoundy的部分组建，前VMare的技术总监自己出来搞的Apcera云平台。 云原生技术，比如docker、Kubernetes等。 1.4 Go 的美貌 说了这么多，Go 程序到底长啥样？我们先睹为快，一看美貌！ 来来来，以 hello.go 为例看看它长啥样。（Go 语言源文件的扩展是 .go） package main import \"fmt\" func main() { fmt.Println(\"Hello, World!\") } 2、为什么我们要学习Go？ 就我而言，目前主要从事微服务方面的产品研发，之前一直使用Java语言作为核心编程语言，但随着市场的变化，Java有时变得力不从心（一些轻量级的功能模块实现时，Java却显得有些笨重）。此外，为迎接云原生技术的到来，学习Go成为了必然。 对于你而言，为什么要学习Go呢？下面我参考知乎和网上大神的答案，谈谈Go语言的优势。 Go 语言特色 简洁、快速、安全 并行、有趣、开源 内存管理、数组安全、编译迅速 Go 语言用途 Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。 对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。 C/C++ 的问题 开发效率低，对开发者要求高；libc 只向后兼容，运维难度偏大。 Lua/Python 的问题 动态语言，缺少编译过程，低级错误频出；缺少有效的性能分析及调试工具。 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-07-21 18:11:51 "},"introduction/install.html":{"url":"introduction/install.html","title":"开发环境搭建","keywords":"","body":"开发环境搭建 1、Go语言环境安装 1.1 开发包获取 Go 语言支持以下系统： Windows Linux Mac：也称为 Darwin FreeBSD 开发包下载地址为：https://golang.org/dl 如果打不开可以使用这个地址：https://golang.google.cn/dl 根据你的系统，选择下载对应的开发包。 图 2.2.1：Go-installer-package 以 Windows 系统为例，下载 Windows 的安装包 go1.16.windows-amd64.msi，下载地址：https://golang.google.cn/doc/install?download=go1.16.windows-amd64.msi 1.2 开发包安装 （1）安装开发包。 双击下载的安装包 go1.16.windows-amd64.msi，一步步安装即可。 默认情况下，会安装在 C:\\Program Files\\Go 目录下。（不同版本会存在差异，以实际为准！） （2）配置 Go 环境变量。 默认情况下，安装完开发包会自动配置 Go 环境变量，如若未配置或配置不符合自己需求（GOPATH 可按照自己的实际情况配置），则安装下面的配置方法配置或进行调整。 根据 Windows 系统在查找可执行程序的原理，可以将 Go 所在路径定义到环境变量中，让系统帮我们去找到运行执行的程序，这样任何目录都可以执行 go 指令。配置的环境变量如下所示： 环境变量 说明 Path 添加 Go 开发包的 /bin 目录，如：C:\\Program Files\\Go\\bin GOPATH 工作目录，设置 Go 项目的工作路径，可根据自我喜好设置。 右键“我的电脑”-> 属性 -> 高级系统设置 -> 高级 -> 系统变量： 图 2.2.2：环境变量设置 添加的环境变量如下： Path：C:\\Program Files\\Go\\bin 图 2.2.3：配置环境变量Path GOPATH：E:\\github\\golangLearning，自定义目录，作为后续 Go 工程目录。 （3）环境检验。 打开 cmd 命令行，执行 go version，检查是否安装成功并生效。 图 2.2.4：go-version执行结果 2、IDE 安装 2.1 IDE 工具 常用的 Go 开发 IDE 如下所示： Visual Studio Code（简称 VSCode） 微软的产品，一个运行于 Mac OS、Windows 和 Linux 之上的工具，默认提供 Go 语言的语法高亮。安装 Go 语言插件，还可以支持智能提示，编译运行等功能。 Sublime Text 可以免费试用，默认也支持Go代码语法高亮，只是保存次数达到一定数量后需要购买。 Vim 它是从 vi（Linux）发展出来的一个文本编辑器，代码补全、编译及错误跳转等方便编程的功能非常丰富。 Emacs 它不仅仅是一个编辑器，因为功能强大，可称为集成开发环境。 Eclipse IDE 工具 开源免费，并提供 GoEclipse 插件。 LiteIDE LiteIDE 是一款专门为 Go 语言开发的跨平台轻量级集成开发环境（IDE），是国人开发的。 JetBrains公司的产品 GoLand、PhpStrom、WebStrom 和 PyCharm 等 IDE 工具，都需要安装 Go 插件。 Go 语言的 IDE 工具很多，可根据自我喜好自行选择，不做强制要求。 （建议大家先选择使用 VSCode，这样能让你更好地理解 Go 语言、基本语法和关键字等。等熟悉 Go 的语法后，再切换到自己顺手的 IDE 即可。） 2.2 安装 VSCode 下载地址：https://code.visualstudio.com/ 图 2.2.5：VSCode下载页面 下载页面可以选择不同版本供大家下载。 我选择了 Windows x64 版本下载，并直接安装即可。 2.3 VSCode 配置 Go 语言插件 （1）首先安装 Go 语言插件： 图 2.2.6：VSCode安装Go语言插件 （2）配置 Go 开发环境包 VSCode 中，快捷键 ctrl+shift+p 打开，输入 go:install： 图 2.2.7：VSCode插件安装go install 并选中 Go:Install/Update Tools 回车，并全部勾选，确认： 图 2.2.8：VSCode插件安装go install Tools environment: GOPATH=E:\\github\\golangLearning Installing 9 tools at E:\\github\\golangLearning\\bin in module mode. gopkgs go-outline gotests gomodifytags impl goplay dlv golint gopls 省略…… Installing github.com/uudashr/gopkgs/v2/cmd/gopkgs (E:\\github\\golangLearning\\bin\\gopkgs.exe) SUCCEEDED Installing github.com/ramya-rao-a/go-outline (E:\\github\\golangLearning\\bin\\go-outline.exe) SUCCEEDED 省略…… All tools successfully installed. You are ready to Go :). 2.4 Go 语言程序快速运行 （1）VSCode 打开刚刚创建的 GOPATH 工程目录。 （2）创建一个新的文件 test.go，编写 Hello, World! Go 程序，代码如下： package main import \"fmt\" func main() { fmt.Println(\"Hello, World!\") } 保存文件后，VSCode 会自动检测到可能需要安装的扩展包或插件，此时我们会看到右下角有弹框提示，如下所示。此时我们暂时忽略，无需安装。 图 2.2.9：VSCode安装Go扩展包 （3）快速运行。 VSCode 中 “Terminal” -> New Terminal，执行 go run test.go 命令直接运行 test.go 程序，结果如下： （实际环境是需要先编译(go build)后运行。go run 命令的执行时间较长，是因为其中包含编译过程。） 图 2.2.10：go run示例 到此，Go 语言开发环境搭建完毕！ Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-07-21 18:11:51 "},"introduction/first-golang-program.html":{"url":"introduction/first-golang-program.html","title":"编写第一个Go程序","keywords":"","body":"编写第一个 Go 程序 在开始 Go 语言的基本语法、函数和高级特性等之前，让我们先编写第一个 Go 程序 “Hello World” 开始，来了解 Go 语言最简单程序的结构吧，看看 Go 程序应该包括哪些部分，每部分都位于什么位置，Go 语言究竟是如何执行的。 我们依然从永恒的 “hello,world” 程序开始，hello.go 源代码如下： package main import \"fmt\" func main() { // \"Hello World!\" Go语言程序 fmt.Println(\"Hello World!\") } 让我们来看下以上程序的各个部分： 第一行代码 package main 定义了包名。你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。 package main 表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。 下一行 import fmt 告诉 Go 编译器这个程序需要使用 fmt 包中的函数或其他元素，fmt 包实现了格式化 IO（输入/输出）的函数。 下一行 func main() 是程序开始执行的函数（入口函数）。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数），等同于 Java 中的 public static void main(String[] agrs)。 下一行 // 是注释，在程序执行时将被忽略。单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾，且不可以嵌套使用，多行注释一般用于包的文档描述或注释成块的代码片段。（与其他语言相同） 下一行 fmt.Println(...) 可以将字符串输出到控制台，并在最后自动增加换行字符 \\n 换行。使用 fmt.Print(\"hello, world\\n\") 可以得到相同的结果。Print 和 Println 这两个函数也支持使用变量，如：fmt.Println(arr)。如果没有特别指定，它们会以默认的打印格式将变量 arr 输出到控制台，后续会单独讲解 fmt 包相关的内容。 1、Go语言结构 从上面的 hello world 程序可以看出，一个完整 Go 语言的程序结构由以下几部分组成： 包声明 引入包 函数 变量 语句 & 表达式 注释 2、执行流程 Go程序源文件是以 .go 作为后缀的文件，有两种执行流程： 1、将源文件先编译成可执行的二进制文件，再运行。 编译源代码：go build 命令，生成可执行文件。 运行可执行文件：直接运行可执行程序文件。 常用于在 Go 编译环境上编译生成可执行的二进制文件，并将可执行的二进制文件部署在任何没有 Go 编译环境的机器上。 图 2.3.1：go build运行流程 2、直接对源文件执行 go run 命令。 常用于开发环境测试使用。（go run 必须依赖 go 开发编译环境） 图 2.3.2：go run运行流程 3、开发注意事项 Go 源文件以 “go” 为扩展名，如：hello.go。 Go 应用程序的执行入口是 main() 函数。 Go 语言严格区分大小写。 Go 方法是由一条条语句构成，每个语句后不需要分号 ; 结束（实际上 Go 语言会自动在每行后加分号），这也体现了 Go 语言的简洁性。 Go 编译器是一行行编译的，因此我们一行就写一条语句，不能把多条语句写在同一行，否则报错。 Go 语言定义变量或者 import 的包如果没有使用到，则代码不能编译通过。 大括号都是成对出现的。 大括号 { 不能单独放在一行。如： package main import \"fmt\" func main() { // 错误，{不能单独成行 fmt.Println(\"Hello World!\") } Go 语言有内置 gofmt 工具，能够自动整理代码多余的空白、变量名称对齐、并将对齐空格转换成 Tab。 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-07-21 18:11:51 "},"introduction/goproxy.html":{"url":"introduction/goproxy.html","title":"Go代理goproxy","keywords":"","body":"Go 代理 goproxy 在逐步编写 Go 程序时，会涉及使用到第三方提供的Go依赖包，如：github.com/spf13/cobra，在国内使用 go get 命令安装时经常会出现 timeout 等问题，实在让人头疼。大家都知道，在国内网络环境下，想要解决这种问题，只有掌握科学上网才能彻底解决。但是xx上网却是需要花费额外成本的，那该怎么办呢？ 本文将会介绍一种Go代理 goproxy 的方式来解决上述问题，让你既不花钱，又能快速下载安装。 1、goproxy.cn 介绍 Go 的 1.11 版本以后可以设置环境变量 GOPROXY，来设置代理，以加速下载。目前国内使用最多的是 goproxy.cn，号称中国最可靠的Go模块代理。 图 2.4.1：goproxy.cn 它有以下特点： 极速下载： 我们正在使用七牛云 CDN 在全球范围内加速我们的服务，并且我们没有设置任何带宽限制。凭借着数以千计的 CDN 节点和 40Gbps+ 的单节点带宽，你将被赋予一个以极快的速度下载模块版本的能力。 没有限制： 我们不但没有设置带宽限制。更进一步地，我们还没有设置任何速率限制。这意味着你可以在任何场景下使用我们的服务，例如 CI/CD。你甚至可以像 goproxy.baidu.com 一样将我们的服务用作上游代理。 功能齐全： 我们一直在使用最新的 Go 版本，甚至是不稳定版本。因为我们提供了最前沿的功能支持。特别地，我们支持代理默认的校验和数据库 sum.golang.org。你不需要做任何额外的事情，它就可以工作。 数据可视： 为了使大家可以更好地了解我们的服务中所有模块的活跃度，我们推出了 Go 模块代理世界中的首个统计数据 API。通过得体的 RESTful API 设计，你将能够轻松地查询我们服务中所有模块版本的统计数据。 2、goproxy.cn 配置 推荐在 Go 1.13 以上版本使用。 打开你的终端执行下面命令： go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.cn,direct macOS 或 Linux： export GO111MODULE=on export GOPROXY=https://goproxy.cn 或者 echo \"export GO111MODULE=on\" >> ~/.profile echo \"export GOPROXY=https://goproxy.cn\" >> ~/.profile source ~/.profile Windows： 打开 cmd 命令行，执行： C:\\> $env:GO111MODULE = \"on\" C:\\> $env:GOPROXY = \"https://goproxy.cn\" 3、小结 有上述 goproxy 代理的设置，go get 命令下载将会变得很快，轻松解决了 timeout 问题。此外，也可以通过国外 goproxy.io 代理完成加速，配置方法和 goproxy.cn 完全一样。 参考文章： https://goproxy.cn https://www.goproxy.io/zh/ Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-07-21 18:11:51 "}}